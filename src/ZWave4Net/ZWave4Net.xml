<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZWave4Net</name>
    </assembly>
    <members>
        <member name="T:ZWave4Net.Channel.Protocol.EventMessage">
            <summary>
            Event from controller to host
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.Frames.DataFrameType.REQ">
            <summary>
            Request. This type MUST be used for unsolicited messages. API callback messages MUST use the Request type.
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.Frames.DataFrameType.RES">
            <summary>
            Response. This type MUST be used for messages that are responses to Requests.
            </summary>
        </member>
        <member name="T:ZWave4Net.Channel.Protocol.Frames.Frame">
            <summary>
            Base class for all frame types
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.Frames.Frame.ACK">
            <summary>
            The ACK frame indicates that the receiving end received a valid Data frame
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.Frames.Frame.NAK">
            <summary>
            The NAK frame indicates that the receiving end received a Data frame with errors
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.Frames.Frame.CAN">
            <summary>
            The CAN frame indicates that the receiving end discarded an otherwise valid Data frame. 
            The CAN frame is used to resolve race conditions, where both ends send a Data frame and subsequently expects an ACK frame from the other end
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.Frames.Frame.SOF">
            <summary>
            The SOF frame contains the Serial API command including parameters for the command in question
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.Frames.Frame.Header">
            <summary>
            The header of the frame
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.Frames.FrameHeader.SOF">
            <summary>
            The SOF frame contains the Serial API command including parameters for the command in question
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.Frames.FrameHeader.ACK">
            <summary>
            The ACK frame indicates that the receiving end received a valid Data frame
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.Frames.FrameHeader.NAK">
            <summary>
            The NAK frame indicates that the receiving end received a Data frame with errors
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.Frames.FrameHeader.CAN">
            <summary>
            The CAN frame indicates that the receiving end discarded an otherwise valid Data frame. 
            The CAN frame is used to resolve race conditions, where both ends send a Data frame and subsequently expects an ACK frame from the other end
            </summary>
        </member>
        <member name="T:ZWave4Net.Channel.Protocol.RequestMessage">
            <summary>
            Message from host to controller
            </summary>
        </member>
        <member name="T:ZWave4Net.Channel.Protocol.ResponseMessage">
            <summary>
            Response from controller to host
            </summary>
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.TransmissionState.CompleteOK">
            <summary> 
            Successfully 
            </summary> 
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.TransmissionState.CompleteNoAcknowledge">
            <summary> 
            No acknowledge is received before timeout from the destination node.  
            Acknowledge is discarded in case it is received after the timeout. 
            </summary> 
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.TransmissionState.CompleteFail">
            <summary> 
            Not possible to transmit data because the Z-Wave network is busy (jammed). 
            </summary> 
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.TransmissionState.CompleteNoRoute">
            <summary> 
            no route found in Assign Route  
            </summary> 
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.TransmissionState.NoAcknowledge">
            <summary> 
            No Communication ACK received 
            </summary> 
        </member>
        <member name="F:ZWave4Net.Channel.Protocol.TransmissionState.ResMissing">
            <summary> 
            No response received 
            </summary> 
        </member>
        <member name="T:ZWave4Net.CommandClasses.AssociationReport">
            <summary>
            Advertises the current destinations of a given association group
            </summary>
        </member>
        <member name="P:ZWave4Net.CommandClasses.AssociationReport.GroupID">
            <summary>
            This field is used to advertise the actual association group.
            </summary>
        </member>
        <member name="P:ZWave4Net.CommandClasses.AssociationReport.MaxNodesSupported">
            <summary>
            The maximum number of destinations supported by the advertised association group. Each destination MAY be a NodeID destination or an End Point destination (if the node supports the Multi Channel Association Command Class).
            </summary>
        </member>
        <member name="P:ZWave4Net.CommandClasses.AssociationReport.ReportsToFollow">
            <summary>
            The entire list destinations of the advertised association group may be too long for one command. This field advertise how many report frames will follow this report
            </summary>
        </member>
        <member name="P:ZWave4Net.CommandClasses.AssociationReport.Nodes">
            <summary>
            This field advertises a list of NodeID destinations of the advertised association group. The list of NodeIDs is empty if there are no NodeID destinations configured for the advertised association group.
            </summary>
        </member>
        <member name="T:ZWave4Net.CommandClasses.BasicReport">
            <summary>
            Advertises the status of the primary functionality of the node
            </summary>
        </member>
        <member name="P:ZWave4Net.CommandClasses.BasicReport.Value">
            <summary>
            The current value
            </summary>
        </member>
        <member name="T:ZWave4Net.CommandClasses.IAssociation">
            <summary>
            The Association interface is used to manage associations to NodeID destinations. A NodeID destination may be a simple device or the Root Device of a Multi Channel device.
            </summary>
        </member>
        <member name="M:ZWave4Net.CommandClasses.IAssociation.Get(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Request the current destinations of a given association group.
            </summary>
            <param name="groupID">This field is used to specify the actual association group. Grouping Identifiers MUST be assigned in a consecutive range starting from 1.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is None.</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:ZWave4Net.CommandClasses.IAssociation.GetGroupings(System.Threading.CancellationToken)">
            <summary>
            This command is used to request the number of association groups that this node supports.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is None.</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:ZWave4Net.CommandClasses.IAssociation.Remove(System.Byte,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            This command is used to remove destinations from a given association group.
            </summary>
            <param name="groupID">This field is used to specify from which association group the specified NodeID destinations should be removed.</param>
            <param name="nodes">This field is used to specify from which association group the specified NodeID destinations should be removed.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is None.</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:ZWave4Net.CommandClasses.IAssociation.Set(System.Byte,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            This command is used to add destinations to a given association group.
            </summary>
            <param name="groupID">This field is used to specify the actual association group. Grouping Identifiers MUST be assigned in a consecutive range starting from 1.</param>
            <param name="nodes">This field specifies a list of NodeIDs that are to be added to the specified association group</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is None.</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="T:ZWave4Net.CommandClasses.IBasic">
            <summary>
            The IBasic interface allows a controlling device to operate the primary functionality of a supporting device without any further knowledge.
            </summary>
        </member>
        <member name="M:ZWave4Net.CommandClasses.IBasic.Get(System.Threading.CancellationToken)">
            <summary>
            Request the status of a supporting device
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is None.</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:ZWave4Net.CommandClasses.IBasic.Set(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Set a value in a supporting device.
            </summary>
            <param name="value">The value</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is None.</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="P:ZWave4Net.CommandClasses.IBasic.Reports">
            <summary>
            Advertises the status of the primary functionality of the device
            </summary>
        </member>
        <member name="T:ZWave4Net.CommandClasses.ISwitchBinary">
            <summary>
            The Binary Switch interface is used to control devices with On/Off or Enable/Disable capability
            </summary>
        </member>
        <member name="M:ZWave4Net.CommandClasses.ISwitchBinary.Get(System.Threading.CancellationToken)">
            <summary>
            The Get command is used to request the status of a device with On/Off or Enable/Disable capability
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is None.</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:ZWave4Net.CommandClasses.ISwitchBinary.Set(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            The Set command is used to set a value
            </summary>
            <param name="value">The value</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is None.</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="P:ZWave4Net.CommandClasses.ISwitchBinary.Reports">
            <summary>
            Advertises the status of a device with On/Off or Enable/Disable capability.
            </summary>
        </member>
        <member name="T:ZWave4Net.CommandClasses.SwitchBinaryReport">
            <summary>
            Advertises the status of a device with On/Off or Enable/Disable capability.
            </summary>
        </member>
        <member name="P:ZWave4Net.CommandClasses.SwitchBinaryReport.Value">
            <summary>
            The current value
            </summary>
        </member>
        <member name="T:ZWave4Net.EndpointCollection">
            <summary>
             Collection of endpoints for a node
            </summary>
        </member>
        <member name="P:ZWave4Net.EndpointCollection.Item(System.Byte)">
            <summary>
            Gets the Endpoint for the specified ID.
            </summary>
            <param name="endpointID">The ID of the Endpoint to get</param>
            <returns>The Endpoint for the specified ID</returns>
        </member>
        <member name="T:ZWave4Net.NeighborUpdateStatus">
            <summary>
            Represents the status of Neighbor Update request
            </summary>
        </member>
        <member name="T:ZWave4Net.Node">
            <summary>
            An individual node in a network
            </summary>
        </member>
        <member name="P:ZWave4Net.Node.NodeType">
            <summary>
            The type of the node
            </summary>
        </member>
        <member name="P:ZWave4Net.Node.Security">
            <summary>
            The security of the node
            </summary>
        </member>
        <member name="P:ZWave4Net.Node.IsListening">
            <summary>
            Z-Wave devices that are plugged in to power and keep their receiver on all the time. Listening devices act as repeaters and therefore extend the Z-Wave mesh network
            </summary>
        </member>
        <member name="F:ZWave4Net.Node.Endpoints">
            <summary>
            The collection of endpoints for this node
            </summary>
        </member>
        <member name="P:ZWave4Net.Node.IsController">
            <summary>
            Gets a value indicating whether this node is a controller 
            </summary>
        </member>
        <member name="M:ZWave4Net.Node.GetNodeInfo(System.Threading.CancellationToken)">
            <summary>
            Gets the node information
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is None.</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:ZWave4Net.Node.GetNeighbours(System.Threading.CancellationToken)">
            <summary>
            Gets the neighbours of the node
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is None.</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:ZWave4Net.Node.RequestNeighborUpdate(System.IProgress{ZWave4Net.NeighborUpdateStatus},System.Threading.CancellationToken)">
            <summary>
            Request the node to update it's neighbors
            </summary>
            <param name="progress">A callback delegate to report progress</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is None.</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="P:ZWave4Net.Node.Updates">
            <summary>
            Advertises updates of the node
            </summary>
        </member>
        <member name="T:ZWave4Net.NodeCollection">
            <summary>
             Collection of nodes for a controller
            </summary>
        </member>
        <member name="P:ZWave4Net.NodeCollection.Item(System.Byte)">
            <summary>
            Gets the Node for the specified ID.
            </summary>
            <param name="nodeID">The ID of the node to get</param>
            <returns>The node, or NULL if the Node doesn't exists</returns>
        </member>
        <member name="T:ZWave4Net.NodeInfo">
            <summary>
            Represents a Node Information Frame
            </summary>
        </member>
        <member name="P:ZWave4Net.NodeInfo.NodeID">
            <summary>
            The NodeID of the node
            </summary>
        </member>
        <member name="P:ZWave4Net.NodeInfo.NodeType">
            <summary>
            The type of the node
            </summary>
        </member>
        <member name="P:ZWave4Net.NodeInfo.SupportedCommandClasses">
            <summary>
            Command Classes implemented by the node
            </summary>
        </member>
        <member name="T:ZWave4Net.NodeType">
            <summary>
            Represents the type of a node
            </summary>
        </member>
        <member name="F:ZWave4Net.NodeType.Basic">
            <summary>
            The basic type of the node
            </summary>
        </member>
        <member name="F:ZWave4Net.NodeType.Generic">
            <summary>
            The generic type of the node
            </summary>
        </member>
        <member name="F:ZWave4Net.NodeType.Specific">
            <summary>
            The specifick type of the node
            </summary>
        </member>
        <member name="T:ZWave4Net.ZWaveController">
            <summary>
            A controller is a Z-Wave device that has a full routing table and is therefore able to communicate with all nodes in the Z-Wave network
            </summary>
        </member>
        <member name="P:ZWave4Net.ZWaveController.HomeID">
            <summary>
            An unique identifier to separate networks from each other
            </summary>
        </member>
        <member name="P:ZWave4Net.ZWaveController.NodeID">
            <summary>
            The NodeID of the controller
            </summary>
        </member>
        <member name="P:ZWave4Net.ZWaveController.Version">
            <summary>
            The version of the controller
            </summary>
        </member>
        <member name="P:ZWave4Net.ZWaveController.ChipType">
            <summary>
            The ChipType of the controller
            </summary>
        </member>
        <member name="F:ZWave4Net.ZWaveController.Nodes">
            <summary>
            The collection of nodes
            </summary>
        </member>
        <member name="M:ZWave4Net.ZWaveController.#ctor(ZWave4Net.Channel.ISerialPort)">
            <summary>
            Initializes an new instance of the ZWaveController
            </summary>
            <param name="port">The serial port to use</param>
        </member>
        <member name="M:ZWave4Net.ZWaveController.Open(System.Boolean)">
            <summary>
            Opens the controller
            </summary>
            <param name="softReset">True to perform a sofreset, False otherwise</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:ZWave4Net.ZWaveController.Close">
            <summary>
            Closes the controller
            </summary>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
    </members>
</doc>
